rm(list=ls())
#*******************************************************************************
## Analysis of horizontal transfer between individual taxonomic categories
#*******************************************************************************
# R version 4.1.3
# author: Jana Schwarzerova
##==============================================================================

#==============================================================================
#Path:
setwd('...')


#==============================================================================
# create_initial_matrix
#==============================================================================
# Function to create an initial matrix from a genome list file
# Args:
#   file_path (str): Path to the genome list file.
# Returns:
#   matrix: Initial matrix with rows and columns corresponding to unique genome IDs.


create_initial_matrix <- function(hgtList) {
    # Convert columns to factors
    hgtList$V1 <- as.factor(hgtList$V1)
    hgtList$V2 <- as.factor(hgtList$V2)
    
    # Get levels of factors
    r_lvl <- levels(hgtList$V2)
    c_lvl <- levels(hgtList$V1)
    
    # Create an initial matrix with all zeros
    mFin <- matrix(0, nrow = length(r_lvl), ncol = length(c_lvl))
    row.names(mFin) <- r_lvl
    colnames(mFin) <- c_lvl
    
    # Initialize variables
    s <- integer(0)
    r <- integer(0)
    s_p <- integer(0)
    r_p <- integer(0)
    
    # Iterate over rows of hgtList
    for(x in 1:nrow(hgtList)) {
        s_p <- grep(hgtList$V1[x], colnames(mFin))
        r_p <- grep(hgtList$V2[x], rownames(mFin))
        
        # Find matching columns and rows
        for (i in 1:length(s_p)){
            if (nchar(as.character(hgtList$V1[x])) == nchar(colnames(mFin)[s_p[i]])) {
                s <- s_p[i]
            }
        }
        for (j in 1:length(r_p)){
            if (nchar(as.character(hgtList$V2[x])) == nchar(rownames(mFin)[r_p[j]])) {
                r <- r_p[j]
            }
        }
        
        # Update matrix if both row and column are found
        if (!((identical(s,integer(0))) || (identical(r,integer(0))))) {
            mFin[r,s] <- 1
        }
        
        # Reset variables
        s <- integer(0)
        r <- integer(0)
        s_p <- integer(0)
        r_p <- integer(0)
    }
    
    # Transpose the matrix
    mFin_T <- t(mFin)
    
    return(mFin_T)
}


#==============================================================================
# process_tree
#==============================================================================
# Function to process a phylogenetic tree file and extract new names
# Args:
#   tree_file (str): Path to the phylogenetic tree file.
#   mFin_T (matrix): Matrix where the column names are to be matched.
# Returns:
#   character: Vector of new names extracted from the tree file.

process_tree <- function(tree_file, mFin_T) {
    # Read the phylogenetic tree file
    myTree <- ape::read.tree(tree_file)
    
    # Extract tip labels from the tree
    bac <- myTree[["tip.label"]]
    
    # Function to extract characters from the right of a string
    substrRight <- function(x, n) {
        substr(x, nchar(x) - n + 1, nchar(x))
    }
    
    # Initialize vector to store new names
    c <- c()
    
    # Iterate over tip labels
    for (x in 1:length(bac)) {
        b <- bac[x]
        
        # Find the index of the second underscore
        i <- unlist(gregexpr("_", b))[2]
        
        # Extract characters after the second underscore
        vz <- substr(b, i + 1, nchar(b))
        
        # Find matching column names in the matrix
        ss <- grep(vz, colnames(mFin_T))[1]
        
        # If no match is found or lengths of names are different, add to the new names vector
        if (is.na(ss)) {
            c <- c(c, vz)
        } else {
            if (nchar(colnames(mFin_T)[ss]) != nchar(vz)) {
                c <- c(c, vz)
            }
        }
    }
    
    # Return the vector of new names
    return(c)
}


#==============================================================================
# add_entries_to_matrix
#==============================================================================
# Function to add entries to the matrix based on the genome pairs
# Args:
#   df (data.frame): Input dataframe containing genomes as columns.
# Returns:
#   data.frame: DataFrame with pairwise gene sums.
add_entries_to_matrix <- function(df) {
    # Copy input dataframe
    table <- as.data.frame(initial_matrix)
    
    # Get column names as genomes
    genomes <- colnames(table)
    
    # Generate pairs of genomes
    genome_pairs <- combn(genomes, 2)
    
    # Create a new dataframe for storing matrix entries
    new_df <- data.frame(matrix(ncol = length(genomes), nrow = length(genomes)), row.names = genomes)
    colnames(new_df) <- genomes
    
    # Iterate over pairs of genomes to compute gene sum and update new dataframe
    for (index in 1:dim(genome_pairs)[2]) {
        gene_sum <- sum(table[genome_pairs[1, index]] & table[genome_pairs[2, index]])
        
        # Update entries for both pairs of genomes
        new_df[genome_pairs[1, index], genome_pairs[2, index]] <- gene_sum
        new_df[genome_pairs[2, index], genome_pairs[1, index]] <- gene_sum
    }
    
    # Set diagonal elements to zero
    for (i in 1:(ncol(new_df))){
        new_df[i,i] <- 0
    }
    
    return(new_df)
}


#==============================================================================
# process_final_matrix
#==============================================================================
# Function to process the final matrix based on a tree list file
# Args:
#   tree_file (character): Path to the tree list file.
#   mFin_ff (matrix): Input matrix to process.
# Returns:
#   matrix: Processed final matrix.
process_final_matrix <- function(tree_file, mFin_ff) {
    # Read the tree list file
    NamesInRightOrder <- read.delim2(tree_file, header = FALSE)
    NamesInRightOrder$V1 <- rev(NamesInRightOrder$V1)
    NamesInRightOrder <- as.data.frame(NamesInRightOrder)
    NamesInRightOrder_short <- NamesInRightOrder
    
    # Initialize the final matrix with NA values
    final_mFin_ff <- matrix(NA, nrow = nrow(NamesInRightOrder), ncol = nrow(NamesInRightOrder))
    
    # Extract short names from the first column
    for (i in 1:(nrow(NamesInRightOrder))) {
        a <- NamesInRightOrder[i,]
        h <- unlist(gregexpr("_", a))[1]
        NamesInRightOrder_short[i,] <- substr(a, h + 1, nchar(a))
    }
    
    # Set row and column names of the final matrix
    row.names(final_mFin_ff) <- t(NamesInRightOrder_short)
    colnames(final_mFin_ff) <- t(NamesInRightOrder_short)
    
    # Initialize variables
    r <- integer(0)
    s <- integer(0)
    
    # Iterate over rows and columns of mFin_ff to fill the final matrix
    for (i in 1:(ncol(mFin_ff))) {
        for (j in 1:(nrow(mFin_ff))) {
            r_p <- grep(rownames(mFin_ff)[i], row.names(final_mFin_ff))
            s_p <- grep(colnames(mFin_ff)[j], colnames(final_mFin_ff))
            for (n in 1:length(r_p)) {
                for (m in 1:length(s_p)) {
                    ind_r <- r_p[n]
                    ind_s <- s_p[m]
                    if (!((is.na(ind_r) || (length(ind_r) == 0)))) {
                        if (nchar(as.character(rownames(mFin_ff)[i])) == nchar(rownames(final_mFin_ff)[ind_r])) {
                            r <- r_p[n]
                        }
                    }
                    if (!((is.na(ind_s) || (length(ind_s) == 0)))) {
                        if (nchar(as.character(colnames(mFin_ff)[j])) == nchar(rownames(final_mFin_ff)[ind_s])) {
                            s <- s_p[m]
                        }
                    }
                }
            }
            # Fill the final matrix with values from mFin_ff
            final_mFin_ff[r,s] <- mFin_ff[i,j]       
        }
    }
    
    # Replace NA values with 0
    final_mFin_ff_p <- final_mFin_ff
    final_mFin_ff_p[is.na(final_mFin_ff_p)] = 0
    
    return(final_mFin_ff_p)
}


#==============================================================================
# generate_heatmap
#==============================================================================
# Function to generate a heatmap from a matrix
# Args:
#   final_mFin_ff_p (matrix): Input matrix for generating the heatmap.
#   palette (character): Name of the color palette to use (default is "Blues").
#   n_colors (numeric): Number of colors in the palette (default is 25).
# Returns:
#   NULL
generate_heatmap <- function(final_mFin_ff_p, palette = "Blues", n_colors = 25) {
    # Replace NA values with 0
    final_mFin_ff_p <- as.matrix(final_mFin_ff_p)
    final_mFin_ff_p[is.na(final_mFin_ff_p)] <- 0
    
    # Generate heatmap with specified color palette
    heatmap(log(final_mFin_ff_p), 
            Colv = NA, 
            Rowv = NA, 
            col = colorRampPalette(brewer.pal(n_colors, palette))(n_colors), 
            scale = "none")
}



# Read the HGT genome list
hgtList <- read.delim2('HGT_output_CD_hit_fv.txt', header = FALSE, sep = '')

# Process the HGT genome list to create the initial matrix
initial_matrix <- create_initial_matrix(hgtList)

# Call the function to process the tree file and extract new names
new_names <- process_tree('PhylogeneticTree_newick.txt', initial_matrix)

# add entries to the matrix based on the genome pairs
new_df <- add_entries_to_matrix(initial_matrix)

# final processing of matrix as core for heat map visualization
final_mFin_ff_p <- process_final_matrix('Tree_list_Rectangular_output_IToL.txt', new_df)



# Example usage:
# generate heatmap using the default "Blues" palette and 25 colors
generate_heatmap(final_mFin_ff_p)

# generate heatmap using the "Greens" palette and 25 colors
generate_heatmap(final_mFin_ff_p, palette = "Greens")

# generate heatmap using the "BrBG" palette and 25 colors
generate_heatmap(final_mFin_ff_p, palette = "BrBG")

# generate heatmap using the "Accent" palette and 25 colors
generate_heatmap(final_mFin_ff_p, palette = "Accent")

